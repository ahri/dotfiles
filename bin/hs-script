#!/bin/sh

RESOLVER=lts-12.9

set -ue

err()
{
	fmt="$1"
	shift
	1>&2 printf "$fmt\n" "$@"
	exit 1
}

stack_install_cmd()
{
	name="$1"
	echo "stack install --resolver $RESOLVER --install-ghc $name"
}

dep()
{
	name=$1
	hint="$2"
	1>/dev/null 2>&1 which $name || err "Missing dependency: $name, $hint"
}

dep awk "apt install awk"
dep grep "apt install grep"
dep sed "apt install sed"
dep stack "apt install stack"

if [ $# -lt 2 ]; then
	1>&2 cat <<EOF
Commands:
	new script_name
	ghci script_name
	watch script_name
	lint script_name
	fix-linting script_name
	compile script_name
	sample script_name [additional RTS params]
EOF
	exit 1
fi

cmd=$1
script_path="$2"
script_dir="`dirname "$script_path"`"
script_name="`basename "$script_path"`"

shift 2

if [ ! -d "$script_dir" ]; then
	mkdir -p "$script_dir"
fi

cd "$script_dir"

new()
{
	cat <<EOF > "$script_path"
#!/usr/bin/env stack
{- stack --resolver $RESOLVER --install-ghc runghc
   --package containers
   --package regex-compat
   --package process
   --package directory
-}

{- COMPILE_FLAGS -O2 -threaded -rtsopts -eventlog -}

-- https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/using-warnings.html
{-# OPTIONS_GHC -Werror -Wall -Wcompat                                  #-}
{-# OPTIONS_GHC -Wincomplete-uni-patterns -Wincomplete-record-updates   #-}
{-# OPTIONS_GHC -Widentities -Wredundant-constraints                    #-}
{-# OPTIONS_GHC -Wmonomorphism-restriction -Wmissing-home-modules       #-}

{-# OPTIONS_GHC -fno-warn-unused-imports -fno-warn-unused-matches       #-}
{-# OPTIONS_GHC -fno-warn-unused-top-binds -fno-warn-unused-local-binds #-}
-- {-# OPTIONS_GHC -ddump-minimal-imports                               #-}

import             Data.Semigroup
import             Data.Foldable
import             Data.Traversable
import             System.Directory
import             System.Environment
import             System.Exit
import             System.IO
import             System.Process
import             Text.Regex

main :: IO ()
main = do
    putStrLn "stdin:"
    getContents >>= putStrLn

    args <- getArgs
    putStrLn "args:"
    traverse_ (hPutStrLn stderr) args 

    exitFailure
EOF

	chmod 755 "$script_path"
}

replaced_cmd()
{
	replacement=$1

	awk -vreplacement=$replacement '
		BEGIN { x = 0; cmd = "" }

		x == 1 {
			cmd = cmd " " $0
		}

		/^{- stack/ {
			x = 1;
			sub(/^{- /, "");
			sub(/runghc/, replacement)
			cmd = $0
		}

		/-}/ { x = 0 }

		END { 
			sub(/-}/, "", cmd)
			sub(/ {2,}/, " ", cmd)
			print cmd
		}
	' < "$script_path"
}

ghci_cmd()
{
	echo `replaced_cmd ghci` --ghci-options '-DGHCI=1' "$script_name"
}

ghci()
{
	`ghci_cmd`
}

highlight()
{
	if which source-highlight > /dev/null; then
		source-highlight -s haskell -f esc
	else
		cat
	fi
}

watch()
{
	dep ghcid "`stack_install_cmd ghcid`"

	1>/dev/null 2>&1 which source-highlight || echo "Hint: Install source-highlight to nicer output"
	ghcid -h8 -T ':ctags' -c "`ghci_cmd`" | highlight
}

lint()
{
	dep hlint "`stack_install_cmd hlint`"

	hlint "$script_path"
}

fix_linting()
{
	dep hlint "`stack_install_cmd hlint`"
	dep refactor "`stack_install_cmd apply-refact`"

	hlint --refactor --refactor-options="-is" "$script_path"
}

compile()
{
	compile_flags=`awk '/^{- COMPILE_FLAGS / { sub(/^{- COMPILE_FLAGS /, ""); sub(/ -}/, ""); print; exit 0 }' < "$script_path"`
	`replaced_cmd ghc` -- $compile_flags "$script_name"
}

case $cmd in
"new")
	new
	;;

"ghci")
	ghci
	;;

"watch")
	watch
	;;
"lint")
	lint
	;;
"fix-linting")
	fix_linting
	;;

"compile")
	compile
	;;

"sample")
	# NB. this doesn't take account of hyperthreading, because it shouldn't
	cores=`grep -c ^processor /proc/cpuinfo`

	compile
	./"`echo "$script_name" | sed 's/\.hs$//'`" +RTS -N$cores -s "$@"
	;;
*)
	err "Unknown command $cmd"
esac
