#!/bin/sh

RESOLVER=lts-12.9

set -ue

if [ $# -eq 0 ]; then
	1>&2 cat <<EOF
Commands:
	new script_name
	ghci script_name
	compile script_name
	sample script_name
EOF
	exit 1
fi

cmd=$1
shift

err()
{
	fmt="$1"
	shift
	printf "$fmt\n" "$@"
	exit 1
}

new()
{
	script="$1"

	cat <<EOF > "$script"
#!/usr/bin/env stack
{- stack --resolver $RESOLVER --install-ghc runghc
   --package containers
   --package regex-compat
   --package process
   --package directory
-}

{- COMPILE_FLAGS -O2 -threaded -rtsopts -eventlog -}

-- https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/using-warnings.html
{-# OPTIONS_GHC -Werror -Wall -Wcompat                                  #-}
{-# OPTIONS_GHC -Wincomplete-uni-patterns -Wincomplete-record-updates   #-}
{-# OPTIONS_GHC -Widentities -Wredundant-constraints                    #-}
{-# OPTIONS_GHC -Wmonomorphism-restriction -Wmissing-home-modules       #-}

{-# OPTIONS_GHC -fno-warn-unused-imports -fno-warn-unused-matches       #-}
{-# OPTIONS_GHC -fno-warn-unused-top-binds -fno-warn-unused-local-binds #-}
-- {-# OPTIONS_GHC -ddump-minimal-imports                               #-}

import             Data.Semigroup
import             Data.Foldable
import             Data.Traversable
import             System.Directory
import             System.Environment
import             System.Exit
import             System.IO
import             System.Process
import             Text.Regex

main :: IO ()
main = do
    putStrLn "stdin:"
    getContents >>= putStrLn

    args <- getArgs
    putStrLn "args:"
    traverse_ (hPutStrLn stderr) args 

    exitFailure
EOF

	chmod 755 "$script"
}

replaced_cmd()
{
	script_name="$1"
	replacement=$2

	awk -vreplacement=$replacement '
		BEGIN { x = 0; cmd = "" }

		x == 1 {
			cmd = cmd " " $0
		}

		/^{- stack/ {
			x = 1;
			sub(/^{- /, "");
			sub(/runghc/, replacement)
			cmd = $0
		}

		/-}/ { x = 0 }

		END { 
			sub(/-}/, "", cmd)
			sub(/ {2,}/, " ", cmd)
			print cmd
		}
	' < "$script_name"
}

ghci()
{
	script_path="$1"
	shift
	script_dir="`dirname "$script_path"`"
	script_name="`basename "$script_path"`"

	cd "$script_dir"

	cmd=`replaced_cmd "$script_name" ghci`

	$cmd "$@" --ghci-options '-DGHCI=1' "$script_name"
}

compile()
{
	script_path="$1"
	shift
	script_dir="`dirname "$script_path"`"
	script_name="`basename "$script_path"`"

	cd "$script_dir"

	cmd=`replaced_cmd "$script_name" ghc`

	compile_flags=`awk '/^{- COMPILE_FLAGS / { sub(/^{- COMPILE_FLAGS /, ""); sub(/ -}/, ""); print; exit 0 }' < "$script_name"`
	$cmd "$@" -- $compile_flags "$script_name"
}

case $cmd in
"new")
	[ $# -ne 1 ] && err "Provide a script name"
	new "$1"
	;;

"ghci")
	[ $# -ne 1 ] && err "Provide a script name"
	ghci "$1"
	;;

"compile")
	[ $# -ne 1 ] && err "Provide a script name"
	compile "$1"
	;;

"sample")
	[ $# -lt 1 ] && err "Provide a script name"
	script_name="$1"
	shift

	cores=`grep -c ^processor /proc/cpuinfo`

	compile "$script_name"
	./"`echo "$script_name" | sed 's/\.hs$//'`" +RTS -N$cores -s "$@"
	;;
*)
	err "Unknown command $cmd"
esac
