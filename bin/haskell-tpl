#!/bin/sh

set -ue

if [ $# -ne 2 ]; then
	echo "USAGE: `basename "$0"` project_name dir_name" >&2
	exit 1
fi

proj=$1
dir="$2"

if echo $proj | grep -q '[^a-zA-Z0-9]'; then
	echo "ERROR: alphanumerics only" >&2
	exit 1
fi

id=`echo $proj | tr '[A-Z]' '[a-z]'`

mkdir "$dir"
cd "$dir"
mkdir -p src test app

cat <<EOF > LICENSE
No license is granted
EOF

cat <<EOF > $id.cabal
name:                mapdone
version:             0.1.0.0
synopsis:            Simple project template from stack
description:         Please see README.md
homepage:            https://github.com/ahri/$id#readme
license:             NONE
license-file:        LICENSE
author:              Adam Piper
maintainer:          adam@ahri.net
copyright:           none
category:            none
build-type:          Simple
cabal-version:       >=1.10

executable mapdone
  hs-source-dirs:      app
  main-is:             Main.hs
  default-language:    Haskell2010
  ghc-options:         -Wall -Werror
  build-depends:       base >= 4.7 && < 5
                     , $id

test-suite spec
  type:                exitcode-stdio-1.0
  hs-source-dirs:      test
  main-is:             Spec.hs
  default-language:    Haskell2010
  ghc-options:         -Wall -Werror
  build-depends:       base >= 4.7 && < 5
                     , hspec >= 2.2.3 && < 3 
                     , $id

library
  hs-source-dirs:      src
  default-language:    Haskell2010
  exposed-modules:     $proj
  ghc-options:         -Wall -Werror
  build-depends:       base >= 4.7 && < 5
EOF

cat <<EOF > stack.yaml
# This file was automatically generated by 'stack init'
#
# Some commonly used options have been documented as comments in this file.
# For advanced use and comprehensive documentation of the format, please see:
# http://docs.haskellstack.org/en/stable/yaml_configuration/

# Resolver to choose a 'specific' stackage snapshot or a compiler version.
# A snapshot resolver dictates the compiler version and the set of packages
# to be used for project dependencies. For example:
#
# resolver: lts-3.5
# resolver: nightly-2015-09-21
# resolver: ghc-7.10.2
# resolver: ghcjs-0.1.0_ghc-7.10.2
# resolver:
#  name: custom-snapshot
#  location: "./custom-snapshot.yaml"
resolver: lts-7.5

# User packages to be built.
# Various formats can be used as shown in the example below.
#
# packages:
# - some-directory
# - https://example.com/foo/bar/baz-0.0.2.tar.gz
# - location:
#    git: https://github.com/commercialhaskell/stack.git
#    commit: e7b331f14bcffb8367cd58fbfc8b40ec7642100a
# - location: https://github.com/commercialhaskell/stack/commit/e7b331f14bcffb8367cd58fbfc8b40ec7642100a
#   extra-dep: true
#  subdirs:
#  - auto-update
#  - wai
#
# A package marked 'extra-dep: true' will only be built if demanded by a
# non-dependency (i.e. a user package), and its test suites and benchmarks
# will not be run. This is useful for tweaking upstream packages.
packages:
- '.'
# Dependency packages to be pulled from upstream that are not in the resolver
# (e.g., acme-missiles-0.3)
extra-deps: []

# Override default flag values for local packages and extra-deps
flags: {}

# Extra package databases containing global packages
extra-package-dbs: []

# Control whether we use the GHC we find on the path
# system-ghc: true
#
# Require a specific version of stack, using version ranges
# require-stack-version: -any # Default
# require-stack-version: ">=1.2"
#
# Override the architecture used by stack, especially useful on Windows
# arch: i386
# arch: x86_64
#
# Extra directories used by stack for building
# extra-include-dirs: [/path/to/dir]
# extra-lib-dirs: [/path/to/dir]
#
# Allow a newer minor version of GHC than the snapshot specifies
# compiler-check: newer-minor
EOF

cat <<EOF > Setup.hs
import Distribution.Simple
main = defaultMain
EOF

cat <<EOF > Rakefile
task :default => :test

code = FileList.new "*/**.hs", "*/**.lhs"
production_code = FileList.new "app/**.hs", "src/**.hs", "app/*.lhs", "src/*.lhs"

desc "Build the program"
task :build do
  verbose(false) { sh "stack build" }
end

desc "Interactive debug"
task :repl do
  verbose(false) { sh "stack ghci" }
end

desc "Run the program"
task :run => :build do
  verbose(false) { sh "stack exec $id 2>&1" }
end

desc "Test the program"
task :test do
  verbose(false) { sh "stack test 2>&1" }
end

desc "Lint the program"
task :lint do
  verbose(true) { sh "hlint #{production_code}" }
end

desc "Automatically apply lintings"
task :lintapply do
  production_code do |f|
    verbose(false) { sh "hlint --refactor --refactor-options=-is #{f}" }
  end
end
EOF

cat <<EOF > src/$proj.hs
module $proj () where
EOF

cat <<EOF > test/Spec.hs
import Test.Hspec
import $proj ()

main :: IO ()
main = do
    hspec $ do
        describe "X" $ do
            context "Y" $ do
                it "Z" $ do
                    True \`shouldBe\` False
EOF

cat <<EOF > app/Main.hs
import $proj ()

main :: IO ()
main = putStrLn "TODO"
EOF
